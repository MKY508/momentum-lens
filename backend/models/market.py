"""
Market indicators and trading signals models.
"""

from sqlalchemy import Column, String, Float, Integer, DateTime, Date, Boolean, Text, JSON
from sqlalchemy.sql import func
from datetime import datetime

from .base import Base


class MarketIndicators(Base):
    """Market-wide indicators and regime detection"""
    __tablename__ = "market_indicators"
    
    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, unique=True, nullable=False, index=True)
    
    # CSI 300 Index data
    hs300_close = Column(Float, nullable=False)
    hs300_volume = Column(Float)
    hs300_turnover = Column(Float)
    
    # Moving averages
    ma20 = Column(Float)
    ma60 = Column(Float)
    ma120 = Column(Float)
    ma200 = Column(Float)  # Yearline
    
    # Volatility indicators
    atr20 = Column(Float)  # 20-day ATR
    volatility20 = Column(Float)  # 20-day realized volatility
    vix_equivalent = Column(Float)  # China VIX equivalent if available
    
    # CHOP indicator
    chop_value = Column(Float)
    chop_status = Column(String(20))  # TRENDING, CHOPPY, TRANSITIONING
    
    # Market regime
    above_yearline = Column(Boolean)
    yearline_distance = Column(Float)  # Percentage distance from MA200
    regime = Column(String(20))  # BULLISH, BEARISH, NEUTRAL
    regime_days = Column(Integer)  # Days in current regime
    
    # Breadth indicators
    advance_decline_ratio = Column(Float)
    new_highs = Column(Integer)
    new_lows = Column(Integer)
    
    # Momentum indicators
    rsi = Column(Float)
    macd = Column(Float)
    macd_signal = Column(Float)
    
    # Market sentiment
    put_call_ratio = Column(Float)
    margin_balance = Column(Float)  # Margin financing balance
    
    # Risk indicators
    systemic_risk_score = Column(Float)
    correlation_index = Column(Float)  # Average pairwise correlation
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    def __repr__(self):
        return f"<MarketIndicators(date={self.date}, regime={self.regime}, chop={self.chop_status})>"


class TradingSignals(Base):
    """Trading signals generated by the decision engine"""
    __tablename__ = "trading_signals"
    
    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, nullable=False, index=True)
    code = Column(String(10), nullable=False, index=True)
    
    # Signal details
    signal_type = Column(String(20), nullable=False)  # BUY, SELL, HOLD, REBALANCE
    action = Column(String(20))  # ENTER, EXIT, ADD, REDUCE, SWITCH
    portfolio_type = Column(String(20))  # Core or Satellite
    
    # Scores and metrics
    momentum_score = Column(Float, nullable=False)
    return_60d = Column(Float)
    return_120d = Column(Float)
    composite_score = Column(Float)  # 0.6*r60 + 0.4*r120
    
    # Ranking
    rank_overall = Column(Integer)
    rank_category = Column(Integer)  # Within category rank
    
    # Correlation analysis
    correlation_max = Column(Float)  # Maximum correlation with existing holdings
    correlation_avg = Column(Float)  # Average correlation with existing holdings
    correlated_with = Column(JSON)  # List of highly correlated ETFs
    
    # Risk metrics
    volatility = Column(Float)
    sharpe_ratio = Column(Float)
    max_drawdown = Column(Float)
    
    # Qualification checks
    passes_buffer = Column(Boolean)
    buffer_distance = Column(Float)
    passes_holding_period = Column(Boolean)
    days_since_last_trade = Column(Integer)
    passes_correlation = Column(Boolean)
    passes_leg_limit = Column(Boolean)
    
    # Trade sizing
    suggested_weight = Column(Float)
    suggested_shares = Column(Integer)
    
    # Execution window
    iopv_premium = Column(Float)
    execution_priority = Column(Integer)  # 1 = highest priority
    
    # Signal strength
    confidence = Column(Float)  # 0-1 confidence score
    signal_strength = Column(String(20))  # STRONG, MODERATE, WEAK
    
    # Metadata
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    executed = Column(Boolean, default=False)
    executed_at = Column(DateTime(timezone=True))
    execution_price = Column(Float)
    notes = Column(Text)
    
    def __repr__(self):
        return f"<TradingSignal(date={self.date}, code={self.code}, signal={self.signal_type}, score={self.momentum_score})>"


class CorrelationMatrix(Base):
    """ETF correlation matrix for portfolio construction"""
    __tablename__ = "correlation_matrix"
    
    id = Column(Integer, primary_key=True, index=True)
    date = Column(Date, nullable=False, index=True)
    etf1_code = Column(String(10), nullable=False, index=True)
    etf2_code = Column(String(10), nullable=False, index=True)
    
    # Correlation metrics
    correlation_90d = Column(Float)  # 90-day rolling correlation
    correlation_60d = Column(Float)  # 60-day rolling correlation
    correlation_30d = Column(Float)  # 30-day rolling correlation
    
    # Cointegration metrics
    cointegration_score = Column(Float)
    is_cointegrated = Column(Boolean, default=False)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    def __repr__(self):
        return f"<CorrelationMatrix(date={self.date}, etf1={self.etf1_code}, etf2={self.etf2_code}, corr={self.correlation_90d})>"


class BacktestResults(Base):
    """Backtest results storage"""
    __tablename__ = "backtest_results"
    
    id = Column(Integer, primary_key=True, index=True)
    strategy_name = Column(String(100), nullable=False)
    
    # Test parameters
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    initial_capital = Column(Float, nullable=False)
    parameters = Column(JSON)  # Store all strategy parameters
    
    # Performance metrics
    final_value = Column(Float)
    total_return = Column(Float)
    annual_return = Column(Float)
    volatility = Column(Float)
    sharpe_ratio = Column(Float)
    sortino_ratio = Column(Float)
    calmar_ratio = Column(Float)
    
    # Risk metrics
    max_drawdown = Column(Float)
    max_drawdown_duration = Column(Integer)  # Days
    var_95 = Column(Float)  # Value at Risk 95%
    cvar_95 = Column(Float)  # Conditional VaR 95%
    
    # Trading metrics
    total_trades = Column(Integer)
    winning_trades = Column(Integer)
    losing_trades = Column(Integer)
    win_rate = Column(Float)
    avg_win = Column(Float)
    avg_loss = Column(Float)
    profit_factor = Column(Float)
    
    # Turnover and costs
    total_turnover = Column(Float)
    total_commission = Column(Float)
    total_slippage = Column(Float)
    
    # Benchmark comparison
    benchmark_return = Column(Float)
    alpha = Column(Float)
    beta = Column(Float)
    information_ratio = Column(Float)
    
    # Daily results
    daily_returns = Column(JSON)  # Array of daily returns
    daily_values = Column(JSON)  # Array of portfolio values
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    notes = Column(Text)
    
    def __repr__(self):
        return f"<BacktestResults(strategy={self.strategy_name}, return={self.total_return:.2%}, sharpe={self.sharpe_ratio:.2f})>"