name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Test backend Python application
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: momentum_user
          POSTGRES_PASSWORD: momentum_password
          POSTGRES_DB: momentum_lens_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libta-dev pkg-config
        
        # Install TA-Lib from source
        cd /tmp
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        sudo ldconfig
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://momentum_user:momentum_password@localhost:5432/momentum_lens_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_github_actions_only" >> $GITHUB_ENV
        echo "TEST_MODE=true" >> $GITHUB_ENV
    
    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run type checking
      working-directory: ./backend
      run: mypy . --ignore-missing-imports
    
    - name: Run security check
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        cat bandit-report.json
    
    - name: Run tests
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://momentum_user:momentum_password@localhost:5432/momentum_lens_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_github_actions_only
        TEST_MODE: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Test frontend React application
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Build Docker images
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: momentum-lens-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: momentum-lens-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          REACT_APP_API_URL=http://localhost:8000
          REACT_APP_WS_URL=ws://localhost:8000

  # Integration tests with Docker Compose
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cp .env.example .env
        sed -i 's/momentum_password_change_this/momentum_password/g' .env
        sed -i 's/redis_password_change_this/redis_password/g' .env
        sed -i 's/your_super_secret_key_change_this_in_production_minimum_32_characters/test_secret_key_for_integration_tests_only/g' .env
        sed -i 's/DEBUG=true/DEBUG=false/g' .env
        sed -i 's/TEST_MODE=false/TEST_MODE=true/g' .env
    
    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 60  # Wait for services to be ready
    
    - name: Check service health
      run: |
        # Check if all containers are running
        docker-compose ps
        
        # Wait for backend health check
        timeout 60 sh -c 'until curl -f http://localhost:8000/api/v1/health; do echo "Waiting for backend..."; sleep 5; done'
        
        # Wait for frontend
        timeout 60 sh -c 'until curl -f http://localhost:3000/health; do echo "Waiting for frontend..."; sleep 5; done'
    
    - name: Run API tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/api/v1/health || exit 1
        curl -f http://localhost:8000/docs || exit 1
    
    - name: Run frontend smoke tests
      run: |
        # Test frontend availability
        curl -f http://localhost:3000/ || exit 1
        
        # Check if React app loads
        response=$(curl -s http://localhost:3000/)
        if [[ $response == *"momentum-lens"* ]]; then
          echo "Frontend loaded successfully"
        else
          echo "Frontend failed to load properly"
          exit 1
        fi
    
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker-compose logs backend
        echo "=== Frontend Logs ==="
        docker-compose logs frontend
        echo "=== Database Logs ==="
        docker-compose logs postgres
        echo "=== Redis Logs ==="
        docker-compose logs redis
    
    - name: Stop services
      run: docker-compose down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript, python

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.docker-build.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "✅ All CI checks passed!"
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
    
    - name: Notify failure
      if: needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.docker-build.result == 'failure' || needs.integration-tests.result == 'failure'
      run: |
        echo "❌ Some CI checks failed!"
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        exit 1