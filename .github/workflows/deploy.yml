name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Deploy to staging automatically on main branch push
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:staging
          ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=staging
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:staging
          ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          REACT_APP_API_URL=${{ secrets.STAGING_API_URL }}
          REACT_APP_WS_URL=${{ secrets.STAGING_WS_URL }}
          BUILD_ENV=staging
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/momentum-lens
          
          # Pull latest changes
          git pull origin main
          
          # Update images
          docker-compose -f docker-compose.staging.yml pull
          
          # Run database migrations
          docker-compose -f docker-compose.staging.yml run --rm backend python scripts/migrate.py migrate
          
          # Restart services with zero downtime
          docker-compose -f docker-compose.staging.yml up -d --remove-orphans
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/api/v1/health || exit 1
          
          # Clean up old images
          docker image prune -f
    
    - name: Run post-deployment tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Test staging API
        curl -f ${{ secrets.STAGING_API_URL }}/api/v1/health || exit 1
        
        # Test staging frontend
        curl -f ${{ secrets.STAGING_FRONTEND_URL }}/health || exit 1
    
    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Frontend: ${{ secrets.STAGING_FRONTEND_URL }}
          API: ${{ secrets.STAGING_API_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to production with manual approval
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-prod]'))
    environment: production
    needs: [deploy-staging]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Tag staging images for production
      run: |
        # Pull staging images
        docker pull ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:staging
        docker pull ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:staging
        
        # Tag for production
        docker tag ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:staging ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:production
        docker tag ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:staging ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:production-${{ github.sha }}
        
        docker tag ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:staging ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:production
        docker tag ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:staging ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:production-${{ github.sha }}
        
        # Push production images
        docker push ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:production
        docker push ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:production-${{ github.sha }}
        docker push ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:production
        docker push ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:production-${{ github.sha }}
    
    - name: Create database backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Create backup before deployment
          cd /opt/momentum-lens
          ./scripts/backup-db.sh production-pre-deploy-$(date +%Y%m%d-%H%M%S)
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/momentum-lens
          
          # Pull latest changes
          git pull origin main
          
          # Update images
          docker-compose -f docker-compose.production.yml pull
          
          # Run database migrations
          docker-compose -f docker-compose.production.yml run --rm backend python scripts/migrate.py migrate
          
          # Blue-green deployment: start new containers
          docker-compose -f docker-compose.production.yml up -d --remove-orphans --scale backend=2 --scale frontend=2
          
          # Wait for new containers to be healthy
          sleep 60
          
          # Health check on new deployment
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/v1/health || exit 1
          
          # Scale down old containers
          docker-compose -f docker-compose.production.yml up -d --remove-orphans
          
          # Clean up old images
          docker image prune -f
    
    - name: Run production health checks
      run: |
        # Comprehensive health check
        sleep 120
        
        # Test production API
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/v1/health || exit 1
        
        # Test production frontend
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1
        
        # Test WebSocket connectivity
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/ws/prices || true
    
    - name: Run smoke tests
      run: |
        # Run basic smoke tests against production
        pip install requests pytest
        
        cat > smoke_test.py << 'EOF'
        import requests
        import os
        
        BASE_URL = f"https://{os.environ['PRODUCTION_DOMAIN']}"
        
        def test_api_health():
            response = requests.get(f"{BASE_URL}/api/v1/health")
            assert response.status_code == 200
            assert response.json()["status"] == "healthy"
        
        def test_frontend_loads():
            response = requests.get(BASE_URL)
            assert response.status_code == 200
            assert "momentum-lens" in response.text.lower()
        
        def test_api_documentation():
            response = requests.get(f"{BASE_URL}/docs")
            assert response.status_code == 200
        
        if __name__ == "__main__":
            test_api_health()
            test_frontend_loads()
            test_api_documentation()
            print("✅ All smoke tests passed!")
        EOF
        
        python smoke_test.py
      env:
        PRODUCTION_DOMAIN: ${{ secrets.PRODUCTION_DOMAIN }}
    
    - name: Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://${{ secrets.PRODUCTION_DOMAIN }}',
            description: 'Production deployment successful'
          })
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production deployment ${{ job.status }}!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          URL: https://${{ secrets.PRODUCTION_DOMAIN }}
          Time: $(date -u)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Rollback production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/momentum-lens
          
          # Rollback database
          ./scripts/restore-db.sh latest-backup
          
          # Rollback to previous images
          docker-compose -f docker-compose.production.yml down
          
          # Pull previous stable images
          docker pull ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-backend:stable
          docker pull ${{ secrets.CONTAINER_REGISTRY }}/momentum-lens-frontend:stable
          
          # Start with stable images
          sed -i 's/:production/:stable/g' docker-compose.production.yml
          docker-compose -f docker-compose.production.yml up -d
          
          # Restore original compose file
          git checkout docker-compose.production.yml
    
    - name: Verify rollback
      run: |
        sleep 60
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/v1/health || exit 1
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "⚠️ Production rollback completed!",
            attachments: [{
              color: "warning",
              fields: [{
                title: "Environment",
                value: "Production",
                short: true
              }, {
                title: "Action",
                value: "Rollback",
                short: true
              }, {
                title: "Triggered by",
                value: "${{ github.actor }}",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}