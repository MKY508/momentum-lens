version: '3.8'

services:
  # PostgreSQL database with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: momentum-lens-db
    environment:
      POSTGRES_DB: momentum_lens
      POSTGRES_USER: ${DB_USER:-momentum_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-momentum_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - momentum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-momentum_user} -d momentum_lens"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis cache for real-time data
  redis:
    image: redis:7-alpine
    container_name: momentum-lens-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - momentum-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # FastAPI backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=${BUILD_ENV:-production}
    container_name: momentum-lens-backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-momentum_user}:${DB_PASSWORD:-momentum_password}@postgres:5432/momentum_lens
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost}
      - TIMEZONE=${TIMEZONE:-Asia/Shanghai}
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data:ro
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - momentum-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000}
        - BUILD_ENV=${BUILD_ENV:-production}
    container_name: momentum-lens-frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - momentum-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production SSL/load balancing)
  nginx:
    image: nginx:alpine
    container_name: momentum-lens-proxy
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - momentum-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

networks:
  momentum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local